/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ A function to find the structure of a subalgebra generated by a list lst, of axes of an axial algebra A. We assume that multiplication +  
+in A is known. Additional input in the form of a string ("a" say) for which the axes are to be called is required. The function returns a+  
+tensor tens of coordinates of products a_i*a_j. Imperative for the list to live in the axial category.                                  +
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
SubAlgStructure:=function(lst,str)
	axes:=lst;
	letter:=str;
	_,bas,strs,m:=SubAlg(axes,letter);
	tens:=[];struct:=[Sprintf("A %o-dimensional %o-closed algebra generated by axes %o_i, 1=<i =<%o ",#bas,m,letter,#axes)];
	A:=Parent(axes[1]);
	basmat:=Matrix(Rationals(),[Eltseq(bas[i]):i in [1..#bas]]);
	signs:=["+","-"];
	signs1:=[1,-1];
	for i in [1..#bas] do 
		for j in [1..#bas] do
		       if i le j then
		      		st:=Sprintf("%o*%o=",strs[i],strs[j]);	       
			       	coord:=Solution(basmat,Vector(Rationals(),Eltseq((A!bas[i])*(A!bas[j]))));
			       Append(~tens,coord);
			       if IsEmpty(Support(coord)) then st:=st*"0";
			       //end if;
				//if not IsEmpty(Support(coord)) then
				elif #Support(coord) eq 1 then
					       if Abs(coord[SetToSequence(Support(coord))[1]]) eq 1 then
						       if Sign(coord[(IndexedSet(Support(coord))[1])]) eq 1 then
							       //Append(~struct,Sprintf("%o*%o= %o",strs[i],strs[j],strs[IndexedSet(Support(coord))[1]]));
			                                      st:=st*Sprintf(" %o",strs[IndexedSet(Support(coord))[1]]);
                               
							 elif Sign(coord[IndexedSet(Support(coord))[1]]) eq -1 then
							       st:=Sprintf("%o*%o= %o",strs[i],strs[j],strs[IndexedSet(Support(coord))[1]]);
						       end if;
						 else
							 if Sign(coord[IndexedSet(Support(coord))[1]]) eq 1 then 
							       st:=st*Sprintf("%o*%o",coord[IndexedSet(Support(coord))[1]],strs[IndexedSet(Support(coord))[1]]);
						          elif Sign(coord[IndexedSet(Support(coord))[1]]) eq -1 then
							       st:=st*Sprintf("%o*%o",coord[IndexedSet(Support(coord))[1]],strs[IndexedSet(Support(coord))[1]]);
							 end if;			
					       end if;
				 elif #Support(coord) gt 1 then
					sup:=IndexedSet(Support(coord)); 
					for k:=1 to #sup do
					       if k eq 1 then
						      if Abs(coord[sup[k]]) eq 1 then
							      if Sign(coord[sup[k]]) eq 1 then 
								      st *:=strs[sup[k]];
							      elif Sign(coord[sup[k]]) eq -1 then 
							      		st*:=Sprintf("-%o",strs[sup[k]]);
							      end if;
						      elif Sign(coord[sup[k]]) eq 1 then 
						      	st*:=Sprintf("%o*%o",coord[sup[k]],strs[sup[k]]);
						     elif Sign(coord[sup[k]]) eq -1 then 
						     	st*:=Sprintf("%o*%o",coord[sup[k]],strs[sup[k]]);
						 
						      end if; 
							elif k gt 1 then
							if Abs(coord[sup[k]]) eq 1 then
								st:=st*Sprintf("%o%o",signs[Index(signs1,Sign(coord[sup[k]]))],strs[sup[k]]);
							elif k gt 1 and Abs(coord[sup[k]]) ne 1 then 
								st:=st*Sprintf("%o %o*%o",signs[Index(signs1,Sign(coord[sup[k]]))],Abs(coord[sup[k]]),strs[sup[k]]);
							end if;
						  end if;	
					       	       
					end for;

				end if;
				//printf "%o ,%o\n",i,j; 
				Append(~struct,st);

       
			end if;
				

		//	end if;
		
		end for;
		//Append(~struct,st);
	end for;
	return tens, struct;
	end function;
