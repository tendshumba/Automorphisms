
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ This function takes an axial algebra A, a subspace V (not necessarily a subalgebra) and attempts to find all the +
+ idempotents in V. This takes optional parameters (length, form,one) so that we can determine idempotents of a    +
+ prescribed length. In such a case it will be advantageous to input a form and identity if A has.                 +
+                                                                                                                  +
+ ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
FindAllIdempotents:=function(A,V:length:=0,form:=IdentityMatrix(BaseField(A),Dimension(A)), one:=A!0,extra_rels:=[])
	n:=Dimension(A);
	id_mat:=IdentityMatrix(BaseField(A),n);	
	m:=Dimension(V);
	F:=BaseField(A);
	R:=PolynomialRing(F,m);/*Set up F[x_1,x_2,...,x_m].*/
	FF:=FieldOfFractions(R);
	AF:=ChangeRing(A,FF);
	v:=&+[R.i*AF!V.i:i in [1..m]];/*Set up $\sum_{i=1}^m x_iv_i. where v_1,v_2,...,v_m is a basis. */
	if not length eq 0 then
		if form eq id_mat then
			bool,U:=HasFrobeniusForm(A);
			if bool eq false then
				return "fail, the concept of length is not defined";
			end if;
		else
			U:=form;
		end if;/*at this stage we either have a form or the function has already returned a fail*/
		if one eq A!0 then
			try
				bool,one:=HasIdentityAlg(A);
				bool:=HasIdentityAlg(A);
			catch e;
				if bool eq false then
					 len_rest:=FrobFormAtElements(v,v,U)-length;
				end if;
			end try;
			_,one:=HasIdentityAlg(A);
			one:=AF!one;
		elif not one eq A!0 then
			one:=AF!Eltseq(one);		
		end if;	
			len_rest:=FrobFormAtElements(one,v,U)-length;/* here we use (v,v)=(v,v*1)=(v*v,1)=(v,1)*/ 
		if extra_rels eq [] then  
			I:=ideal<R|Eltseq(v*v-v) cat [len_rest]>;
		elif extra_rels ne [] then  
			I:=ideal<R|Eltseq(v*v-v) cat [len_rest] cat extra_rels>; 
		end if; 
	elif length eq 0 then
		if extra_rels eq [] then  
			I:=ideal<R|Eltseq(v*v-v)>;
		elif extra_rels ne [] then  
			I:=ideal<R|Eltseq(v*v-v) cat extra_rels>;
		end if;
	end if;
		varsize:=VarietySizeOverAlgebraicClosure(I);
		if Dimension(I) le 0 then
			var:=Variety(I);
			if #var eq varsize then
				idemps:=[];
				for x in var do
					ide:=&+[x[i]*A!V.i:i in [1..m]];
					Append(~idemps,ide);
				end for;
				return idemps;
			else
				FClos:=AlgebraicClosure(FF);
				varF:=Variety(I,FClos);
				AClos:=ChangeRing(A,FClos);
				idemps:=[];
				for x in varF do
					ide:=&+[x[i]*AClos!V.i:i in [1..m]];
					Append(~idemps,ide);
				end for;
				return idemps, FClos;
			end if;
		elif Dimension(I) eq 1 then
			print "ideal not zero-dimensional";
			return "fail";
		end if;

	end function;


				


